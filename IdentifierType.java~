package hw2;


public class IdentifierType {

    //functional data
    private String type;

    //static
    private static ArrayList<String> known_types;
    private static Map<String, IdentifierType> known_extends;
    ///private static Map<String, IdentifierType> known_identifiers;

    //static initializer
    static {
	known_types.add("Boolean");
	known_types.add("int[]");
	known_types.add("int");
    }

    //constructor
    public IdentifierType(String s) throws TypeCheckException {
	if (! known_types.contains(s)) {
	    throw new TypeChcekException("Type '"+s+"'not recognized");
	}
	type = s;
    }
    
    
    //querry functions
    public Boolean isExactlyType(String s) {
	return type.equals(s);
    }
    public Boolean isOfType(String s) {
	if (type.equals(s)) {
	    return true;
	}
	else if (known_extends.get(type)) {
	    return known_extends.get(type).isType(s);
	}
	return false
    }
    public Boolean sameAs(IdentifierType t) {
	return t.isType(type);
    }

    //set functions
    public void newKnownType(String s) {
	known_types.add(s);
    }
    public void newKnownType(String s, IdentifierType e) {
	known_types.add(s);
	known_extends.put(s, e);
    }


    
    //STATIC

        //static functions
    public static IdentifierType lookupIdentifier(String s) throws ParseException{
	if (!known_identifiers.get(s)) {
	    throw ParseException("No identifier '"+s+"' known");
	}
	else return known_identifiers.get(s);
    }
}
